# PostgreSQL Deployment for Free Deep Research System
# Phase 4.3: Infrastructure Modernization

apiVersion: v1
kind: Secret
metadata:
  name: postgresql-secret
  namespace: free-deep-research
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: free-deep-research-system
type: Opaque
data:
  # Base64 encoded values - replace with actual values
  postgres-password: cG9zdGdyZXNfcGFzc3dvcmQ=  # postgres_password
  postgres-user: ZmRyX3VzZXI=  # fdr_user
  postgres-db: ZnJlZV9kZWVwX3Jlc2VhcmNo  # free_deep_research

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-config
  namespace: free-deep-research
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: free-deep-research-system
data:
  postgresql.conf: |
    # PostgreSQL Configuration for Free Deep Research System
    
    # Connection Settings
    listen_addresses = '*'
    port = 5432
    max_connections = 200
    
    # Memory Settings
    shared_buffers = 256MB
    effective_cache_size = 1GB
    work_mem = 4MB
    maintenance_work_mem = 64MB
    
    # WAL Settings
    wal_level = replica
    max_wal_size = 1GB
    min_wal_size = 80MB
    checkpoint_completion_target = 0.9
    
    # Query Planner
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_statement = 'mod'
    log_min_duration_statement = 1000
    
    # Performance
    shared_preload_libraries = 'pg_stat_statements'
    
  pg_hba.conf: |
    # PostgreSQL Client Authentication Configuration
    
    # TYPE  DATABASE        USER            ADDRESS                 METHOD
    local   all             all                                     trust
    host    all             all             127.0.0.1/32            md5
    host    all             all             ::1/128                 md5
    host    all             all             0.0.0.0/0               md5

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresql-pvc
  namespace: free-deep-research
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: free-deep-research-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: fast-ssd  # Adjust based on your storage class

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql
  namespace: free-deep-research
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: free-deep-research-system
    app.kubernetes.io/version: "15"
spec:
  replicas: 1
  strategy:
    type: Recreate  # Required for PVC
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/component: database
        app.kubernetes.io/part-of: free-deep-research-system
        app.kubernetes.io/version: "15"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: fdr-service-account
      priorityClassName: fdr-critical
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true
      containers:
      - name: postgresql
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          name: postgresql
          protocol: TCP
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: postgres-db
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgresql-storage
          mountPath: /var/lib/postgresql/data
        - name: postgresql-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: postgresql-config
          mountPath: /etc/postgresql/pg_hba.conf
          subPath: pg_hba.conf
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2
            memory: 4Gi
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
          successThreshold: 1
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
          successThreshold: 1
        startupProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
      
      # PostgreSQL Exporter for Prometheus monitoring
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:v0.15.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9187
          name: metrics
          protocol: TCP
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@localhost:5432/$(POSTGRES_DB)?sslmode=disable"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: postgres-password
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: postgres-db
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9187
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /metrics
            port: 9187
          initialDelaySeconds: 5
          periodSeconds: 5
      
      volumes:
      - name: postgresql-storage
        persistentVolumeClaim:
          claimName: postgresql-pvc
      - name: postgresql-config
        configMap:
          name: postgresql-config
      
      # Node affinity for database workloads
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-type
                operator: In
                values:
                - database
          - weight: 50
            preference:
              matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
      
      # Toleration for dedicated database nodes
      tolerations:
      - key: "database"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---
apiVersion: v1
kind: Service
metadata:
  name: postgresql-service
  namespace: free-deep-research
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: free-deep-research-system
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9187"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: 5432
    protocol: TCP
  - name: metrics
    port: 9187
    targetPort: 9187
    protocol: TCP
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database

---
# Headless service for StatefulSet (if needed for clustering)
apiVersion: v1
kind: Service
metadata:
  name: postgresql-headless
  namespace: free-deep-research
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: free-deep-research-system
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: postgresql
    port: 5432
    targetPort: 5432
    protocol: TCP
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: database
