# Main Ingress Configuration for Free Deep Research System
# Phase 4.3: Infrastructure Modernization

apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
  labels:
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/part-of: free-deep-research-system
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: admin@freedeepresearch.org
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: nginx

---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
  labels:
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/part-of: free-deep-research-system
spec:
  acme:
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    email: admin@freedeepresearch.org
    privateKeySecretRef:
      name: letsencrypt-staging
    solvers:
    - http01:
        ingress:
          class: nginx

---
apiVersion: v1
kind: Secret
metadata:
  name: fdr-tls-secret
  namespace: free-deep-research
  labels:
    app.kubernetes.io/name: ingress
    app.kubernetes.io/part-of: free-deep-research-system
type: kubernetes.io/tls
data:
  # Self-signed certificate for development - replace with real certificates
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t...
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t...

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fdr-main-ingress
  namespace: free-deep-research
  labels:
    app.kubernetes.io/name: ingress
    app.kubernetes.io/part-of: free-deep-research-system
  annotations:
    # Ingress class
    kubernetes.io/ingress.class: "nginx"
    
    # SSL/TLS configuration
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit-rps: "100"
    nginx.ingress.kubernetes.io/rate-limit-connections: "50"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options DENY;
      add_header X-Content-Type-Options nosniff;
      add_header X-XSS-Protection "1; mode=block";
      add_header Referrer-Policy "strict-origin-when-cross-origin";
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
    
    # CORS configuration
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://app.freedeepresearch.org"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    
    # Proxy settings
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    
    # Load balancing
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
    nginx.ingress.kubernetes.io/load-balance: "round_robin"
    
    # Compression
    nginx.ingress.kubernetes.io/enable-gzip: "true"
    nginx.ingress.kubernetes.io/gzip-level: "6"
    
    # Monitoring
    nginx.ingress.kubernetes.io/enable-access-log: "true"
    nginx.ingress.kubernetes.io/enable-rewrite-log: "false"
spec:
  tls:
  - hosts:
    - app.freedeepresearch.org
    - api.freedeepresearch.org
    - ws.freedeepresearch.org
    secretName: fdr-tls-certificate
  rules:
  # Main application frontend
  - host: app.freedeepresearch.org
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 3000
  
  # API backend
  - host: api.freedeepresearch.org
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 8080
  
  # WebSocket endpoint
  - host: ws.freedeepresearch.org
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 8080

---
# Development/staging ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fdr-dev-ingress
  namespace: free-deep-research
  labels:
    app.kubernetes.io/name: ingress
    app.kubernetes.io/part-of: free-deep-research-system
    environment: development
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/rate-limit-rps: "200"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
spec:
  tls:
  - hosts:
    - dev.freedeepresearch.org
    - staging.freedeepresearch.org
    secretName: fdr-dev-tls-certificate
  rules:
  # Development environment
  - host: dev.freedeepresearch.org
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 8080
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 8080
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 3000
  
  # Staging environment
  - host: staging.freedeepresearch.org
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 8080
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 8080
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 3000

---
# Internal services ingress (for monitoring, admin, etc.)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fdr-internal-ingress
  namespace: free-deep-research
  labels:
    app.kubernetes.io/name: ingress
    app.kubernetes.io/part-of: free-deep-research-system
    access: internal
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: fdr-basic-auth
    nginx.ingress.kubernetes.io/auth-realm: "Free Deep Research Internal"
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
spec:
  tls:
  - hosts:
    - internal.freedeepresearch.org
    secretName: fdr-internal-tls-certificate
  rules:
  - host: internal.freedeepresearch.org
    http:
      paths:
      # Prometheus metrics
      - path: /metrics
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 9090
      # Health checks
      - path: /health
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 8080
      # Admin interface
      - path: /admin
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 8080

---
# Basic auth secret for internal services
apiVersion: v1
kind: Secret
metadata:
  name: fdr-basic-auth
  namespace: free-deep-research
  labels:
    app.kubernetes.io/name: ingress
    app.kubernetes.io/part-of: free-deep-research-system
type: Opaque
data:
  # admin:$2y$10$... (bcrypt hash of password)
  # Generate with: htpasswd -nb admin password | base64
  auth: YWRtaW46JGFwcjEkSDY1dnVhNzAkLnNzTGlLNzJOSUZmcUdJaVJHdGcx  # admin:admin (change this!)
